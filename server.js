import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';

const app = express();
const PORT = 8000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Your Next.js app API endpoint (localhost since both services on same EC2)
const AIARCHIVES_API_URL = 'http://localhost:3000/api/conversation';

/**
 * Convert conversation messages to HTML format that matches your parser expectations
 */
function convertConversationToHtml(messages, title = 'Claude Conversation') {
  const timestamp = new Date().toISOString();
  
  const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${escapeHtml(title)}</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px; 
            line-height: 1.6;
        }
        .conversation-header {
            border-bottom: 2px solid #e1e8ed;
            padding-bottom: 16px;
            margin-bottom: 24px;
        }
        .message { 
            margin: 20px 0; 
            padding: 16px; 
            border-radius: 8px; 
            border-left: 4px solid;
        }
        .user { 
            background-color: #f8f9fa; 
            border-left-color: #007bff;
        }
        .assistant { 
            background-color: #f0f8ff; 
            border-left-color: #28a745;
        }
        .role { 
            font-weight: 600; 
            margin-bottom: 8px; 
            text-transform: capitalize; 
            font-size: 14px;
            color: #666;
        }
        .content { 
            white-space: pre-wrap; 
            color: #333;
            font-size: 15px;
        }
        .timestamp { 
            font-size: 12px; 
            color: #999; 
            margin-top: 8px;
            font-style: italic;
        }
        .conversation-meta {
            background: #f8f9fa;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="conversation-header">
        <h1>${escapeHtml(title)}</h1>
        <div class="conversation-meta">
            <div>Saved: ${timestamp}</div>
            <div>Total messages: ${messages.length}</div>
        </div>
    </div>
    
    <div class="conversation">
        ${messages.map((msg, index) => `
            <div class="message ${msg.role}" data-message-index="${index}">
                <div class="role">${escapeHtml(msg.role)}</div>
                <div class="content">${escapeHtml(msg.content)}</div>
                ${msg.timestamp ? `<div class="timestamp">${escapeHtml(msg.timestamp)}</div>` : ''}
            </div>
        `).join('')}
    </div>
    
    <div class="conversation-footer" style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e1e8ed; font-size: 12px; color: #999; text-align: center;">
        Generated by Claude MCP Server • ${timestamp}
    </div>
</body>
</html>`;
  
  return htmlContent;
}

/**
 * Escape HTML special characters to prevent XSS
 */
function escapeHtml(text) {
  if (typeof text !== 'string') return '';
  
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  return text.replace(/[&<>"']/g, (m) => map[m]);
}

/**
 * Send conversation to aiarchives API using multipart/form-data
 */
async function saveConversationToApi(htmlContent, model = 'Claude Sonnet 4') {
  try {
    console.log(`Saving conversation to API: ${AIARCHIVES_API_URL}`);
    console.log(`Model: ${model}, HTML size: ${htmlContent.length} bytes`);

    // Create FormData for multipart/form-data request
    const formData = new FormData();
    
    // Add HTML content as file (matching your API's expectation)
    formData.append('htmlDoc', Buffer.from(htmlContent, 'utf8'), {
      filename: `conversation-${Date.now()}.html`,
      contentType: 'text/html'
    });
    
    // Add model information
    formData.append('model', model);

    // Make request to your aiarchives API
    const response = await fetch(AIARCHIVES_API_URL, {
      method: 'POST',
      body: formData,
      headers: {
        ...formData.getHeaders(),
      }
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`API request failed: ${response.status} ${response.statusText}`);
      console.error('Error response:', errorText);
      throw new Error(`API request failed: ${response.status} ${errorText}`);
    }

    const result = await response.json();
    console.log('Successfully saved conversation:', result);
    return result;

  } catch (error) {
    console.error('Error saving conversation to API:', error);
    throw error;
  }
}

// Root MCP endpoint - this is what mcp-remote expects
app.post('/mcp', async (req, res) => {
  console.log('Received MCP request:', JSON.stringify(req.body, null, 2));

  const { method, params, id, jsonrpc } = req.body;

  try {
    // Handle notifications (no response needed) - notifications don't have an id
    if (id === undefined && method) {
      console.log(`Handling notification: ${method}`);
      switch (method) {
        case 'notifications/initialized':
          console.log('MCP Client initialized successfully');
          break;
        case 'notifications/cancelled':
          console.log('Request cancelled by client');
          break;
        default:
          console.log(`Unknown notification: ${method}`);
      }
      // For notifications, we must not send any response
      res.status(204).end(); // 204 No Content
      return;
    }

    // Validate that we have required fields for method calls
    if (!jsonrpc || !method || id === undefined) {
      res.status(400).json({
        jsonrpc: '2.0',
        id: id || null,
        error: {
          code: -32600,
          message: 'Invalid Request - missing required fields (jsonrpc, method, id)',
        },
      });
      return;
    }

    // Handle regular method calls (these have an id)
    switch (method) {
      case 'initialize':
        console.log('Initializing MCP server...');
        res.json({
          jsonrpc: '2.0',
          id: id,
          result: {
            protocolVersion: '2025-06-18',
            capabilities: {
              tools: {},
            },
            serverInfo: {
              name: 'Aiarchives MCP Server',
              version: '1.0.0',
              description: 'MCP server for saving Claude conversations to aiarchives'
            },
          },
        });
        break;

      case 'tools/list':
        console.log('Listing available tools...');
        res.json({
          jsonrpc: '2.0',
          id: id,
          result: {
            tools: [
              {
                name: 'save_conversation',
                description: 'Save the current conversation between user and Claude to aiarchives database',
                inputSchema: {
                  type: 'object',
                  properties: {
                    title: { 
                      type: 'string',
                      description: 'Title for the conversation (will be used as the filename and display title)'
                    },
                    messages: {
                      type: 'array',
                      description: 'Complete array of conversation messages in chronological order',
                      items: {
                        type: 'object',
                        properties: {
                          role: { 
                            type: 'string', 
                            enum: ['user', 'assistant'],
                            description: 'Who sent this message'
                          },
                          content: { 
                            type: 'string',
                            description: 'The actual message content'
                          },
                          timestamp: { 
                            type: 'string',
                            description: 'ISO timestamp when message was sent (optional)'
                          }
                        },
                        required: ['role', 'content']
                      }
                    },
                    model: {
                      type: 'string',
                      description: 'AI model name (e.g., "Claude Sonnet 4", "GPT-4", etc.)',
                      default: 'Claude Sonnet 4'
                    }
                  },
                  required: ['title', 'messages'],
                },
              },
            ],
          },
        });
        break;

      case 'tools/call':
        if (!params || !params.name) {
          res.status(400).json({
            jsonrpc: '2.0',
            id: id,
            error: {
              code: -32602,
              message: 'Invalid params - missing tool name',
            },
          });
          return;
        }

        const { name, arguments: args } = params;
        console.log(`Calling tool: ${name} with args:`, JSON.stringify(args, null, 2));

        switch (name) {
          case 'save_conversation':
            try {
              // Validate required arguments
              if (!args.title || !args.messages || !Array.isArray(args.messages)) {
                res.status(400).json({
                  jsonrpc: '2.0',
                  id: id,
                  error: {
                    code: -32602,
                    message: 'Invalid params - title (string) and messages (array) are required',
                  },
                });
                return;
              }

              if (args.messages.length === 0) {
                res.status(400).json({
                  jsonrpc: '2.0',
                  id: id,
                  error: {
                    code: -32602,
                    message: 'Invalid params - messages array cannot be empty',
                  },
                });
                return;
              }

              // Validate each message structure
              for (let i = 0; i < args.messages.length; i++) {
                const msg = args.messages[i];
                if (!msg.role || !msg.content || !['user', 'assistant'].includes(msg.role)) {
                  res.status(400).json({
                    jsonrpc: '2.0',
                    id: id,
                    error: {
                      code: -32602,
                      message: `Invalid message at index ${i} - must have role ('user' or 'assistant') and content`,
                    },
                  });
                  return;
                }
              }

              console.log(`Processing conversation: "${args.title}" with ${args.messages.length} messages`);

              // Convert conversation to HTML format
              const htmlContent = convertConversationToHtml(args.messages, args.title);
              console.log(`Generated HTML content: ${htmlContent.length} bytes`);
              
              // Save to aiarchives API
              const result = await saveConversationToApi(htmlContent, args.model || 'Claude Sonnet 4');
              
              const successMessage = `✅ Conversation "${args.title}" saved successfully!\n🔗 View at: ${result.url}\n📊 ${args.messages.length} messages archived`;

              res.json({
                jsonrpc: '2.0',
                id: id,
                result: {
                  content: [{ 
                    type: 'text', 
                    text: successMessage
                  }],
                },
              });

            } catch (error) {
              console.error('Error in save_conversation tool:', error);
              res.status(500).json({
                jsonrpc: '2.0',
                id: id,
                error: {
                  code: -32603,
                  message: `Failed to save conversation: ${error.message}`,
                },
              });
            }
            break;

          default:
            res.status(400).json({
              jsonrpc: '2.0',
              id: id,
              error: {
                code: -32601,
                message: `Unknown tool: ${name}. Available tools: save_conversation`,
              },
            });
            return;
        }
        break;

      default:
        res.status(400).json({
          jsonrpc: '2.0',
          id: id,
          error: {
            code: -32601,
            message: `Method not found: ${method}. Available methods: initialize, tools/list, tools/call`,
          },
        });
    }
  } catch (error) {
    console.error('Unexpected error processing MCP request:', error);
    res.status(500).json({
      jsonrpc: '2.0',
      id: id || null,
      error: {
        code: -32603,
        message: `Internal server error: ${error.message}`,
      },
    });
  }
});

// Health check endpoint for monitoring
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    server: 'Aiarchives MCP Server',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    endpoints: {
      mcp: '/mcp',
      health: '/health'
    }
  });
});

// Handle GET requests to /mcp (for debugging and verification)
app.get('/mcp', (req, res) => {
  res.json({
    message: 'Aiarchives MCP Server is running',
    note: 'Use POST requests for MCP protocol communication',
    server: 'Aiarchives MCP Server v1.0.0',
    protocol: 'JSON-RPC 2.0 over HTTP',
    availableTools: [
      {
        name: 'save_conversation',
        description: 'Save Claude conversations to aiarchives database'
      }
    ],
    usage: 'Tell Claude: "Save this conversation as [title]"',
    examples: [
      'Save this conversation as "MCP Setup Discussion"',
      'Please save our chat with the title "API Integration Help"'
    ]
  });
});

// Start the server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`🚀 Aiarchives MCP Server started successfully!`);
  console.log(`📡 Server listening on: http://0.0.0.0:${PORT}`);
  console.log(`🏥 Health check endpoint: http://0.0.0.0:${PORT}/health`);
  console.log(`🔌 MCP protocol endpoint: http://0.0.0.0:${PORT}/mcp`);
  console.log(`🎯 Connected to aiarchives API: ${AIARCHIVES_API_URL}`);
  console.log(`⏰ Started at: ${new Date().toISOString()}`);
  console.log('');
  console.log('🔧 Available tools: save_conversation');
  console.log('💬 Usage: Tell Claude to "Save this conversation as [title]"');
});